#!/bin/bash

# Script to transfer local repository to GitHub
# Created by GitHub Copilot

echo "Starting repository transfer process..."

# Step 1: Make sure we're in the project directory
cd /home/jaymes/ai-character-creator
echo "✅ Changed to project directory"

# Handle corrupted git repo by reinitializing
echo "Reinitializing git repository to fix corruption issues..."
rm -rf .git
git init
echo "✅ Reinitialized git repository"

# Step 2: Create proper .gitignore for node.js project
echo "Creating proper .gitignore file..."
cat > .gitignore << 'EOL'
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# node-waf configuration
.lock-wscript

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# dotenv environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.local

# Mac files
.DS_Store

# Build files
build/.cache
EOL
echo "✅ Created .gitignore file"

# Step 3: Remove node_modules (they should be reinstalled after cloning)
echo "Preparing to clean up large/unnecessary files..."
if [ -d "node_modules" ]; then
    echo "Removing node_modules directory..."
    rm -rf node_modules
    echo "✅ Removed node_modules directory"
fi

# Step 4: Remove any other large files or build artifacts
echo "Cleaning up cached files..."
find . -name "*.pack" -size +90M -delete
echo "✅ Removed large pack files"

# Step 5: Check git configuration
git config --get user.email || git config user.email "user@example.com"
git config --get user.name || git config user.name "GitHub User"
echo "✅ Git user configured"

# Step 6: Add all files
git add -A
echo "✅ Added all files to git"

# Step 7: Commit changes
git commit -m "Complete project transfer from ai-character-creator" || echo "No changes to commit"
echo "✅ Committed changes"

# Step 8: Ensure we're on the main branch
git branch -M main
echo "✅ Renamed branch to main"

# Step 9: Add the origin with proper URL
git remote add origin https://github.com/Huntman1210/L.N.A.E..git
echo "✅ Set up remote repository connection"

# Step 10: Try to fetch remote content first
echo "Fetching from remote repository..."
git fetch origin main || echo "No remote content found, creating fresh repository"

# Step 11: Try to pull with allow-unrelated-histories
echo "Attempting to merge with remote content..."
git pull origin main --allow-unrelated-histories || echo "No merge needed or merge failed, will force push"

# Step 12: Push to the repository
echo "Pushing to remote repository..."
git push -u origin main --force

echo "✅✅✅ Repository transfer complete! ✅✅✅"
echo "Your code is now available at https://github.com/Huntman1210/L.N.A.E."
